Index: app/src/main/java/com/example/culturunya/controllers/CtrlPantallaIniciDeSessio.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.culturunya.controllers\r\n\r\nfun comprovaNomContrasenya(nom: String, contrasenya: String): Boolean {\r\n    //Crida a l'API i retorna cert i és correcte\r\n    return true\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/culturunya/controllers/CtrlPantallaIniciDeSessio.kt b/app/src/main/java/com/example/culturunya/controllers/CtrlPantallaIniciDeSessio.kt
--- a/app/src/main/java/com/example/culturunya/controllers/CtrlPantallaIniciDeSessio.kt	(revision e849291ab5c5c7bbbc8b294fa061530cab3c1e62)
+++ b/app/src/main/java/com/example/culturunya/controllers/CtrlPantallaIniciDeSessio.kt	(date 1741911113872)
@@ -3,4 +3,7 @@
 fun comprovaNomContrasenya(nom: String, contrasenya: String): Boolean {
     //Crida a l'API i retorna cert i és correcte
     return true
+}
+fun mostraEvents():{
+
 }
\ No newline at end of file
Index: app/src/main/java/com/example/culturunya/screens/EventsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/culturunya/screens/EventsScreen.kt b/app/src/main/java/com/example/culturunya/screens/EventsScreen.kt
new file mode 100644
--- /dev/null	(date 1741911457255)
+++ b/app/src/main/java/com/example/culturunya/screens/EventsScreen.kt	(date 1741911457255)
@@ -0,0 +1,168 @@
+package com.example.culturunya.screens
+
+import android.widget.Toast
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material3.*
+import androidx.compose.runtime.*
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import androidx.navigation.NavController
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun Pantalla() {
+    Scaffold {
+        MainScreen(navController = NavController())
+    }
+}
+
+@Composable
+fun MainScreen(navController: NavController) {
+    var currentScreen by remember { mutableStateOf("Events") }
+
+    Column(
+        modifier = Modifier.fillMaxSize()
+    ) {
+        Text(
+            text = "Culturunya",
+            style = MaterialTheme.typography.headlineSmall,
+            modifier = Modifier
+                .fillMaxWidth()
+                .wrapContentHeight()
+                .padding(16.dp),
+            textAlign = TextAlign.Center
+        )
+
+        Box(
+            modifier = Modifier
+                .weight(1f)
+                .fillMaxWidth(),
+            contentAlignment = Alignment.Center
+        ) {
+            when (currentScreen) {
+                "Events" -> EventsScreen()
+                "Quiz" -> QuizScreen()
+                "Leaderboard" -> LeaderboardScreen()
+                "Settings" -> SettingsScreen()
+            }
+        }
+
+        Row(
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(8.dp),
+            horizontalArrangement = Arrangement.SpaceEvenly
+        ) {
+            Button(onClick = { currentScreen = "Events" }) {
+                Text("Events")
+            }
+            Button(onClick = { currentScreen = "Quiz" }) {
+                Text("Quiz")
+            }
+            Button(onClick = { currentScreen = "Leaderboard" }) {
+                Text("Leaderboard")
+            }
+            Button(onClick = { currentScreen = "Settings" }) {
+                Text("Settings")
+            }
+        }
+    }
+}
+
+@Composable
+fun EventsScreen() {
+    val events = listOf("Evento 1", "Evento 2", "Evento 3", "Evento 4")
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .padding(16.dp)
+    ) {
+        events.forEach { event ->
+            EventBox(event)
+        }
+    }
+}
+
+@Composable
+fun EventBox(event: String) {
+    var expanded by remember { mutableStateOf(false) }
+
+    Box(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(8.dp)
+            .background(Color.LightGray, RoundedCornerShape(8.dp))
+            .clickable { /* Acción al hacer clic normal */ }
+            .pointerInput(Unit) {
+                detectTapGestures(
+                    onLongPress = {
+                        expanded = true
+                    }
+                )
+            }
+    ) {
+        Column(
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(16.dp)
+        ) {
+            Text(
+                text = event,
+                style = TextStyle(fontSize = 18.sp, fontWeight = FontWeight.Bold),
+                color = Color.Black
+            )
+        }
+
+        // Menú contextual
+        DropdownMenu(
+            expanded = expanded,
+            onDismissRequest = { expanded = false }
+        ) {
+            DropdownMenuItem(
+                text = { Text("Detalles del Evento") },
+                onClick = {
+                    expanded = false
+                    // Acción para ver los detalles del evento
+                }
+            )
+            DropdownMenuItem(
+                text = { Text("Editar Evento") },
+                onClick = {
+                    expanded = false
+                    // Acción para editar el evento
+                }
+            )
+            DropdownMenuItem(
+                text = { Text("Eliminar Evento") },
+                onClick = {
+                    expanded = false
+                    // Acción para eliminar el evento
+                }
+            )
+        }
+    }
+}
+
+@Composable
+fun QuizScreen() {
+    Text("Aquesta serà la pantalla de Quiz")
+}
+
+@Composable
+fun LeaderboardScreen() {
+    Text("Aquesta serà la pantalla de Leaderboard")
+}
+
+@Composable
+fun SettingsScreen() {
+    Text("Aquesta serà la pantalla de Settings")
+}
+
